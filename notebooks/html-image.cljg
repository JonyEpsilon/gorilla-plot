;; gorilla-repl.fileformat = 2

;; @@ [meta]
{}

;; @@

;; **
;;;  # html image test
;;; 
;;; This test explores how custom-html can be rendered in gorilla
;; **

;; @@ [clj]
;; (use '[gorilla-repl table latex html])
(use 'pinkgorilla.ui.gorilla-renderable)
;; (use 'hiccup.core)
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; @@ [clj]
(defrecord Image [url])
(defn image 
  [url]
  (html [:img {:src url :height 100 :width 100 :alt "it's an image"}]))
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-var"],"#'user/image"],"~:value","#'user/image"]
;; <=

;; @@ [clj]
(extend-type Image
  Renderable
  (render [self]
          {:type :html
           :content (image (:url self))
           :value (pr-str self)}))
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; @@ [clj]
(Image. "https://cdn.mos.cms.futurecdn.net/yyvvM9kwaVGySFE6aXXoJL-320-80.jpg")
;; @@
;; =>
;;; ["^ ","~:type","html","~:content","<img alt=\"it&apos;s an image\" height=\"100\" src=\"https://cdn.mos.cms.futurecdn.net/yyvvM9kwaVGySFE6aXXoJL-320-80.jpg\" width=\"100\" />","~:value","#user.Image{:url \"https://cdn.mos.cms.futurecdn.net/yyvvM9kwaVGySFE6aXXoJL-320-80.jpg\"}"]
;; <=

;; @@ [clj]
(println (image "https://pbs.twimg.com/profile_images/641353910561566720/VSxsyxs7.jpg"))
;; @@
;; ->
;;; <img alt="it&apos;s an image" height="100" src="https://pbs.twimg.com/profile_images/641353910561566720/VSxsyxs7.jpg" width="100" />
;; <-
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=
