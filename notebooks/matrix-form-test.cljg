;; gorilla-repl.fileformat = 2

;; @@ [meta]
{:tags "ui,core.matrix,legacy,custom-renderer", :name "core.matrix visualization", :tagline "from jonny epsilon", :description ""}

;; @@

;; **
;;; # Thinking about core.matrix rendering
;;; 
;;; This sample was adapted from LegacyGorilla to Pinkgorilla.
;;; 
;;; Gorilla's renderer at the moment works by dispatching the render call on type. How might this work with core.matrix, and other things that are defined by _protocol_?
;;; 
;;; One idea, sketched out in this worksheet is to use a view-function, much like is done in Mathematica. Internally it will work by wrapping the matrix in a marker type, but this should be viewed as an implementation detail.
;;; 
;;; In Mathematica, matrices are represented by lists-of-lists, and on the whole, the notebook doesn't do anything special with them, displaying them like flat lists-of-lists. There'a a function, `MatrixForm` whose job is to tag the data for display in the front end as a matrix.
;;; 
;;; ### Implementation
;;; 
;;; We'll start with the implementation - skip below to see how it looks from the user perspective.
;; **

;; @@ [clj]
(ns demo.matrix
  (:require [pinkgorilla.helper :refer [add-dependencies]]))
(add-dependencies '[[org.pinkgorilla/gorilla-renderable "3.0.0"]
                    [net.mikera/core.matrix "0.62.0"]])

(use 'clojure.core.matrix)
(use 'pinkgorilla.ui.gorilla-renderable)
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; **
;;; This type is just a marker for the front end, to know to render its contents as a matrix.
;; **

;; @@ [clj]
(defrecord MatrixView [contents])
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-class"],"demo.matrix.MatrixView"],"~:value","demo.matrix.MatrixView"]
;; <=

;; **
;;; A helper function, and an `extend-type` call (which at the minute are straight stolen from the table renderer, so you'll have to use your imagination on the formatting) tell Gorilla how to render things tagged as `MatrixView`. These rendering functions would work using protocol methods, meaning it would work for any implementation.
;; **

;; @@ [clj]
(defn list-like
  [data value open close separator]
  {:type :list-like
   :open open
   :close close
   :separator separator
   :items data
   :value value})
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-var"],"#'demo.matrix/list-like"],"~:value","#'demo.matrix/list-like"]
;; <=

;; @@ [clj]
(extend-type MatrixView
  Renderable
  (render [self]
    (let [contents (:contents self)
          rows (map (fn [r] (list-like (map render r) 
                                       (pr-str r) "<tr><td>" "</td></tr>" "</td><td>")) contents)
          body (list-like rows 
                          (pr-str self) "<center><table>" "</table></center>" "\n")]
      body)))
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-nil"],"nil"],"~:value","nil"]
;; <=

;; **
;;; And then, finally the user-facing function, which from their perspective, shows the given object as a matrix.
;; **

;; @@ [clj]
(defn matrix-view [i] (MatrixView. i))
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-var"],"#'demo.matrix/matrix-view"],"~:value","#'demo.matrix/matrix-view"]
;; <=

;; **
;;; ### User perspective
;;; 
;;; The user can define a matrix:
;; **

;; @@ [clj]
(def i (matrix [[1 2 5] [3 4 5] [1 2 1]]))
;; @@
;; =>
;;; ["^ ","~:type","html","~:content",["span",["^ ","~:class","clj-var"],"#'demo.matrix/i"],"~:value","#'demo.matrix/i"]
;; <=

;; **
;;; And if they look at it, it will be faithfully rendered according to the underlying implementation. This is kind of nice in a way, as you can really see what's going on.
;; **

;; @@ [clj]
i
;; @@
;; =>
;;; ["^ ","~:type","list-like","~:open",["span",["^ ","~:class","clj-vector"],"["],"~:close",["span",["^ ","^2","clj-vector"],"]"],"~:separator",["span"," "],"~:items",[["^ ","^0","list-like","^1",["span",["^ ","^2","clj-vector"],"["],"^3",["span",["^ ","^2","clj-vector"],"]"],"^4",["span"," "],"^5",[["^ ","^0","html","~:content",["span",["^ ","^2","clj-long"],"1"],"~:value","1"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"2"],"^7","2"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"5"],"^7","5"]],"^7","[1 2 5]"],["^ ","^0","list-like","^1",["span",["^ ","^2","clj-vector"],"["],"^3",["span",["^ ","^2","clj-vector"],"]"],"^4",["span"," "],"^5",[["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"3"],"^7","3"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"4"],"^7","4"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"5"],"^7","5"]],"^7","[3 4 5]"],["^ ","^0","list-like","^1",["span",["^ ","^2","clj-vector"],"["],"^3",["span",["^ ","^2","clj-vector"],"]"],"^4",["span"," "],"^5",[["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"1"],"^7","1"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"2"],"^7","2"],["^ ","^0","html","^6",["span",["^ ","^2","clj-long"],"1"],"^7","1"]],"^7","[1 2 1]"]],"^7","[[1 2 5] [3 4 5] [1 2 1]]"]
;; <=

;; **
;;; But, if you want to look at it as a matrix, then you can put it in to `matrix-view`.
;; **

;; @@ [clj]
(matrix-view i)
;; @@
;; =>
;;; ["^ ","~:type","list-like","~:open","<center><table>","~:close","</table></center>","~:separator","\n","~:items",[["^ ","^0","list-like","^1","<tr><td>","^2","</td></tr>","^3","</td><td>","^4",[["^ ","^0","html","~:content",["span",["^ ","~:class","clj-long"],"1"],"~:value","1"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"2"],"^7","2"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"5"],"^7","5"]],"^7","[1 2 5]"],["^ ","^0","list-like","^1","<tr><td>","^2","</td></tr>","^3","</td><td>","^4",[["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"3"],"^7","3"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"4"],"^7","4"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"5"],"^7","5"]],"^7","[3 4 5]"],["^ ","^0","list-like","^1","<tr><td>","^2","</td></tr>","^3","</td><td>","^4",[["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"1"],"^7","1"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"2"],"^7","2"],["^ ","^0","html","^5",["span",["^ ","^6","clj-long"],"1"],"^7","1"]],"^7","[1 2 1]"]],"^7","#demo.matrix.MatrixView{:contents [[1 2 5] [3 4 5] [1 2 1]]}"]
;; <=
